include "inc/gbhw.inc"

;--------------------------------------------------------------------
;
; Interrupt Handlers
;
;--------------------------------------------------------------------
section	"VBlank", rom0[$0040]
    call endFrame
	reti
section	"LCDC", rom0[$0048]
    call startScanline
	reti
section	"TimerOverflow", rom0[$0050]
	reti
section	"Serial", rom0[$0058]
	reti
section	"Joypad", rom0[$0060]
	reti

;--------------------------------------------------------------------
;
; Entry point of the program, disables interrupts and
; continues to the main code section.
;
;--------------------------------------------------------------------
section "EntryPoint", rom0[$100]
    di 
    jp main

;--------------------------------------------------------------------
;
; Main portion of the ROM containing the actual code
;
;--------------------------------------------------------------------
section "GameCode", rom0[$150]

;--------------------------------------------------------------------
;
; Main function of the program called in the entry point
;
;--------------------------------------------------------------------
main::
    call StopLCD        ; Stop LCD
    call LoadTilesBG    ; Load background tiles

    ld a, [rBGP]        ; Store initial BGP in $C000
    ld hl, $C000
    ld [hl], a

    ld a, $03           ; Allow only VBlank & LCD STAT interrupts
    ld [rIE], a
    ld a, $0F           ; Enable HBlank STAT interrupts
    ld [rSTAT], a

    ld a, %10010001     ; Enable LCD & background tilemap $8000
    ld [rLCDC], a
    
    ei                  ; Enable Interrupts

    ld b, 10
    
.lockup                 ; Prevent PC from going to crazy places
    halt
    jr .lockup

;--------------------------------------------------------------------
;
; Handler for LCD STAT interrupt.
; Called every scanline, increments SCX by one.
;
;--------------------------------------------------------------------
startScanline::
    ld a, [rSCX]        ; Load A with current SCX value
    inc a               ; Increment A
    ld [rSCX], a        ; Write A back to memory
    cp a, 72            ; Check if next scanline is 72
    ret nz              ; Return if not
    ld a, %11100100     ; Otherwise, set A to BGP should-value
    ld [rBGP], a        ; And load into memory
    ret

;--------------------------------------------------------------------
;
; Handler for VBlank interrupt.
; Called every frame, resets SCX to zero.
;
;--------------------------------------------------------------------
endFrame::
    xor a               ; Set A to zero
    ld [rSCX], a        ; And load it into SCX
    ld a, [hl]          ; Load initial BGP from RAM
    ld [rBGP], a        ; And into the BGP register

    dec b
    jr nz, .skip

    ld b, b

.skip:
    ret

;--------------------------------------------------------------------
;
; Loads Tile 0 with a test pattern and clears
; the entire background with Tile 0.
;
; Destroys: AF, HL, C, DE
;
;--------------------------------------------------------------------
LoadTilesBG::
    ld c, $BB           ; Load C with tile pattern
    ld hl, $8000        ; Load HL with base pointer for tileset
    ld de, $0010        ; Load DE with $10 (byte count for one tile)
    call memfill16      ; Fill tile 0 memory with pattern

    ld c, $00           ; Load C with zero
    ld hl, $9800        ; Load HL with base for background tilemap
    ld de, $0800        ; Load DE with byte count for background
    call memfill16      ; Fill background map with tile 0
    ret

;--------------------------------------------------------------------
;
; Fills all bytes in a memory region with a certain value.
;  - HL > Destination base pointer
;  - DE > Amount of bytes to write
;  - C  > Byte to write
;
; Destroys: AF, HL, DE
;
;--------------------------------------------------------------------
memfill16::
.memfill16Loop
    ld a,c                  ; Load C into accumulator for memory writes
    ld [hli], a             ; Load memory at HL and increment pointer
    dec de                  ; Decrement byte counter
    ld a,e                  ; Load A with lower nibble of byte counter
    and e                   ; Set zero flag if lower nibble of byte counter is 0
    jr nz, .memfill16Loop   ; Restart memory load process if lower nibble != 0
    ld a,d                  ; Load A with higher nibble of byte counter
    and d                   ; Set zero flag if higher nibble of byte counter is 0
    jr nz, .memfill16Loop   ; Restart memory load process if higher nibble != 0
    ret

;--------------------------------------------------------------------
;
; Waits for the next VBlank period and stops LCD.
;
; Destroys: AF
;
;--------------------------------------------------------------------
StopLCD::
    call WaitVBlank         ; Wait for VBlank
    xor a                   ; Set A to 0
    ld [rLCDC], a           ; Load 0 to LCDC
    ret

;--------------------------------------------------------------------
;
; Pauses operation until the next VBlank period.
;
; Destroys: AF
;
;--------------------------------------------------------------------
WaitVBlank::
.vblLoop
    ld a, [rLY]             ; Load current LY into A
    cp 144                  ; Check if scanline is 144 (VBlank)
    jr nz, .vblLoop         ; If not, repeat
    ret
